(* Generated by re2ocaml 4.0.2 *)
(* $ make generate-re2c *)
(* vim: set filetype=ocaml: *)

(* NOTE: re2c can request a character one position greater than the end of
   the string ("the sentinel"). In OCaml, strings are always represented with
   \000 at the end, so to avoid copying, we can use
   [String.unsafe_get str (String.length str)], which should in fact be safe.
   The [pos <= String.length str] check is not done here; it is assumed that
   re2c generates correct code. *)
let get = String.unsafe_get

let error msg = raise @@ Err.Custom_lexing_error msg

type state = {
  yyinput : string;
  yylimit : int;
  mutable yycursor : int;
  mutable yyaccept : int;
  mutable yymarker : int;
  
  mutable yytl0 : int;
  mutable yytr0 : int;
  
  mutable yyt1 : int;
}

let make_state ?(offset = 0) input = {
  yyinput = input;
  yylimit = String.length input;
  yycursor = offset;
  yyaccept = 0;
  yymarker = 0;
  
  yytl0 = 0;
  yytr0 = 0;
  
  yyt1 = 0;
}

(* no unused variables *)
[@@@warning "-27"]




let rec yy0 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00'
    | '\x01'..'['
    | ']'..'\x7F' ->
      if (yyrecord.yylimit <= yyrecord.yycursor) then (
        (yy51 [@tailcall]) yyrecord strbuf
      ) else (
        yyrecord.yyt1 <- yyrecord.yycursor;
        yyrecord.yycursor <- yyrecord.yycursor + 1;
        (yy1 [@tailcall]) yyrecord strbuf
      )
    | '\\' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy3 [@tailcall]) yyrecord strbuf
    | '\xC2'..'\xDF' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy6 [@tailcall]) yyrecord strbuf
    | '\xE0' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy7 [@tailcall]) yyrecord strbuf
    | '\xE1'..'\xEF' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy8 [@tailcall]) yyrecord strbuf
    | '\xF0' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy9 [@tailcall]) yyrecord strbuf
    | '\xF1'..'\xF3' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy10 [@tailcall]) yyrecord strbuf
    | '\xF4' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy11 [@tailcall]) yyrecord strbuf
    | _ ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy4 [@tailcall]) yyrecord strbuf

and yy1 (yyrecord : state) (strbuf : Buffer.t) : string =
  (yy2 [@tailcall]) yyrecord strbuf

and yy2 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yytl0 <- yyrecord.yyt1;
  yyrecord.yytr0 <- yyrecord.yycursor;
  
    let len = yyrecord.yytr0 - yyrecord.yytl0 in
    Buffer.add_substring strbuf yyrecord.yyinput yyrecord.yytl0 len;
    resolve_escapes yyrecord strbuf


and yy3 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00'
    | '\x01'..'\b'
    | '\x0E'..'\x1F'
    | '!'
    | '#'..'['
    | ']'..'a'
    | 'c'..'e'
    | 'g'..'m'
    | 'o'..'q'
    | 'v'..'\x7F' ->
      if (yyrecord.yylimit <= yyrecord.yycursor) then (
        (yy2 [@tailcall]) yyrecord strbuf
      ) else (
        yyrecord.yycursor <- yyrecord.yycursor + 1;
        (yy12 [@tailcall]) yyrecord strbuf
      )
    | '\t'..'\r'
    | ' ' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | '"' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy16 [@tailcall]) yyrecord strbuf
    | '\\' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy17 [@tailcall]) yyrecord strbuf
    | 'b' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy18 [@tailcall]) yyrecord strbuf
    | 'f' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy19 [@tailcall]) yyrecord strbuf
    | 'n' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy20 [@tailcall]) yyrecord strbuf
    | 'r' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy21 [@tailcall]) yyrecord strbuf
    | 's' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy22 [@tailcall]) yyrecord strbuf
    | 't' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy23 [@tailcall]) yyrecord strbuf
    | 'u' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy24 [@tailcall]) yyrecord strbuf
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy25 [@tailcall]) yyrecord strbuf
    | '\xC3'..'\xDF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy27 [@tailcall]) yyrecord strbuf
    | '\xE0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy28 [@tailcall]) yyrecord strbuf
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy29 [@tailcall]) yyrecord strbuf
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy30 [@tailcall]) yyrecord strbuf
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy31 [@tailcall]) yyrecord strbuf
    | '\xE4'..'\xEF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy32 [@tailcall]) yyrecord strbuf
    | '\xF0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy33 [@tailcall]) yyrecord strbuf
    | '\xF1'..'\xF3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy34 [@tailcall]) yyrecord strbuf
    | '\xF4' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy35 [@tailcall]) yyrecord strbuf
    | _ -> (yy2 [@tailcall]) yyrecord strbuf

and yy4 (yyrecord : state) (strbuf : Buffer.t) : string =
  (yy5 [@tailcall]) yyrecord strbuf

and yy5 (yyrecord : state) (strbuf : Buffer.t) : string =
  assert false

and yy6 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy1 [@tailcall]) yyrecord strbuf
    | _ -> (yy5 [@tailcall]) yyrecord strbuf

and yy7 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy36 [@tailcall]) yyrecord strbuf
    | _ -> (yy5 [@tailcall]) yyrecord strbuf

and yy8 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy36 [@tailcall]) yyrecord strbuf
    | _ -> (yy5 [@tailcall]) yyrecord strbuf

and yy9 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x90'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy37 [@tailcall]) yyrecord strbuf
    | _ -> (yy5 [@tailcall]) yyrecord strbuf

and yy10 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy37 [@tailcall]) yyrecord strbuf
    | _ -> (yy5 [@tailcall]) yyrecord strbuf

and yy11 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy37 [@tailcall]) yyrecord strbuf
    | _ -> (yy5 [@tailcall]) yyrecord strbuf

and yy12 (yyrecord : state) (strbuf : Buffer.t) : string =
  (yy13 [@tailcall]) yyrecord strbuf

and yy13 (yyrecord : state) (strbuf : Buffer.t) : string =
  error "Invalid escape sequence"

and yy14 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 2;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\t'..'\r'
    | ' ' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy38 [@tailcall]) yyrecord strbuf
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy39 [@tailcall]) yyrecord strbuf
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy40 [@tailcall]) yyrecord strbuf
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy41 [@tailcall]) yyrecord strbuf
    | _ -> (yy15 [@tailcall]) yyrecord strbuf

and yy15 (yyrecord : state) (strbuf : Buffer.t) : string =
  resolve_escapes yyrecord strbuf

and yy16 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '"'; resolve_escapes yyrecord strbuf

and yy17 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '\\'; resolve_escapes yyrecord strbuf

and yy18 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '\b'; resolve_escapes yyrecord strbuf

and yy19 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '\012'; resolve_escapes yyrecord strbuf

and yy20 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '\n'; resolve_escapes yyrecord strbuf

and yy21 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '\r'; resolve_escapes yyrecord strbuf

and yy22 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf ' '; resolve_escapes yyrecord strbuf

and yy23 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_char strbuf '\t'; resolve_escapes yyrecord strbuf

and yy24 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yyaccept <- 3;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '{' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy42 [@tailcall]) yyrecord strbuf
    | _ -> (yy13 [@tailcall]) yyrecord strbuf

and yy25 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x84'
    | '\x86'..'\x9F'
    | '\xA1'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy12 [@tailcall]) yyrecord strbuf
    | '\x85'
    | '\xA0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy26 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yycursor <- yyrecord.yymarker;
  match yyrecord.yyaccept with
    | 0 -> (yy2 [@tailcall]) yyrecord strbuf
    | 1 -> (yy5 [@tailcall]) yyrecord strbuf
    | 2 -> (yy15 [@tailcall]) yyrecord strbuf
    | _ -> (yy13 [@tailcall]) yyrecord strbuf

and yy27 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy12 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy28 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy27 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy29 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x99'
    | '\x9B'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy27 [@tailcall]) yyrecord strbuf
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy43 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy30 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy44 [@tailcall]) yyrecord strbuf
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy45 [@tailcall]) yyrecord strbuf
    | '\x82'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy27 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy31 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy43 [@tailcall]) yyrecord strbuf
    | '\x81'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy27 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy32 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy27 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy33 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x90'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy32 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy34 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy32 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy35 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy32 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy36 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy1 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy37 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy36 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy38 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x85'
    | '\xA0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy39 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy46 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy40 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy47 [@tailcall]) yyrecord strbuf
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy48 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy41 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy46 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy42 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '0'..'9'
    | 'A'..'F'
    | 'a'..'f' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy49 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy43 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | '\x81'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy12 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy44 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8A'
    | '\xA8'..'\xA9'
    | '\xAF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | '\x8B'..'\xA7'
    | '\xAA'..'\xAE'
    | '\xB0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy12 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy45 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x9E'
    | '\xA0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy12 [@tailcall]) yyrecord strbuf
    | '\x9F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy46 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy47 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8A'
    | '\xA8'..'\xA9'
    | '\xAF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy48 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy14 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy49 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '0'..'9'
    | 'A'..'F'
    | 'a'..'f' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy49 [@tailcall]) yyrecord strbuf
    | '}' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy50 [@tailcall]) yyrecord strbuf
    | _ -> (yy26 [@tailcall]) yyrecord strbuf

and yy50 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yytl0 <- yyrecord.yyt1;
  yyrecord.yytr0 <- yyrecord.yycursor;
  yyrecord.yytr0 <- yyrecord.yytr0 - 1;
  
    let len = yyrecord.yytr0 - yyrecord.yytl0 in
    if len > 6 then
      error "Invalid unicode scalar value";
    let code_str = String.sub yyrecord.yyinput yyrecord.yytl0 len in
    let code = int_of_string @@ "0x" ^ code_str in
    if not @@ Uchar.is_valid code then
      error "Invalid unicode scalar value";
    Buffer.add_utf_8_uchar strbuf (Uchar.unsafe_of_int code);
    resolve_escapes yyrecord strbuf


and yy51 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.contents strbuf

and resolve_escapes (yyrecord : state) (strbuf : Buffer.t) : string =
  (yy0 [@tailcall]) yyrecord strbuf




let rec yy52 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\t'
    | ' ' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | '\n'..'\x0C' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy57 [@tailcall]) yyrecord
    | '\r' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy59 [@tailcall]) yyrecord
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy60 [@tailcall]) yyrecord
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy61 [@tailcall]) yyrecord
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy62 [@tailcall]) yyrecord
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy63 [@tailcall]) yyrecord
    | _ ->
      if (yyrecord.yylimit <= yyrecord.yycursor) then (
        (yy73 [@tailcall]) yyrecord
      ) else (
        yyrecord.yycursor <- yyrecord.yycursor + 1;
        (yy53 [@tailcall]) yyrecord
      )

and yy53 (yyrecord : state) : int =
  (yy54 [@tailcall]) yyrecord

and yy54 (yyrecord : state) : int =
  ~-1

and yy55 (yyrecord : state) : int =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\t'
    | ' ' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy64 [@tailcall]) yyrecord
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy66 [@tailcall]) yyrecord
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy67 [@tailcall]) yyrecord
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy68 [@tailcall]) yyrecord
    | _ -> (yy56 [@tailcall]) yyrecord

and yy56 (yyrecord : state) : int =
  skip_whitespace_line yyrecord

and yy57 (yyrecord : state) : int =
  (yy58 [@tailcall]) yyrecord

and yy58 (yyrecord : state) : int =
  yyrecord.yycursor

and yy59 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\n' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy57 [@tailcall]) yyrecord
    | _ -> (yy58 [@tailcall]) yyrecord

and yy60 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x85' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy57 [@tailcall]) yyrecord
    | '\xA0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | _ -> (yy54 [@tailcall]) yyrecord

and yy61 (yyrecord : state) : int =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy69 [@tailcall]) yyrecord
    | _ -> (yy54 [@tailcall]) yyrecord

and yy62 (yyrecord : state) : int =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy70 [@tailcall]) yyrecord
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy71 [@tailcall]) yyrecord
    | _ -> (yy54 [@tailcall]) yyrecord

and yy63 (yyrecord : state) : int =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy69 [@tailcall]) yyrecord
    | _ -> (yy54 [@tailcall]) yyrecord

and yy64 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy65 (yyrecord : state) : int =
  yyrecord.yycursor <- yyrecord.yymarker;
  if (yyrecord.yyaccept == 0) then (yy56 [@tailcall]) yyrecord
  else (yy54 [@tailcall]) yyrecord

and yy66 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy69 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy67 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy72 [@tailcall]) yyrecord
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy71 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy68 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy69 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy69 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy70 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8A'
    | '\xAF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | '\xA8'..'\xA9' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy57 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy71 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy72 (yyrecord : state) : int =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8A'
    | '\xAF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy55 [@tailcall]) yyrecord
    | _ -> (yy65 [@tailcall]) yyrecord

and yy73 (yyrecord : state) : int =
  yyrecord.yycursor

and skip_whitespace_line (yyrecord : state) : int =
  (yy52 [@tailcall]) yyrecord




let rec yy74 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\t'
    | ' ' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy79 [@tailcall]) yyrecord
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy80 [@tailcall]) yyrecord
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy81 [@tailcall]) yyrecord
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy82 [@tailcall]) yyrecord
    | _ ->
      if (yyrecord.yylimit <= yyrecord.yycursor) then (
        (yy91 [@tailcall]) yyrecord
      ) else (
        yyrecord.yycursor <- yyrecord.yycursor + 1;
        (yy75 [@tailcall]) yyrecord
      )

and yy75 (yyrecord : state) : bool =
  (yy76 [@tailcall]) yyrecord

and yy76 (yyrecord : state) : bool =
  false

and yy77 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\t'
    | ' ' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy83 [@tailcall]) yyrecord
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy85 [@tailcall]) yyrecord
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy86 [@tailcall]) yyrecord
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy87 [@tailcall]) yyrecord
    | _ -> (yy78 [@tailcall]) yyrecord

and yy78 (yyrecord : state) : bool =
  is_fully_whitespace yyrecord

and yy79 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | _ -> (yy76 [@tailcall]) yyrecord

and yy80 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy88 [@tailcall]) yyrecord
    | _ -> (yy76 [@tailcall]) yyrecord

and yy81 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy89 [@tailcall]) yyrecord
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy90 [@tailcall]) yyrecord
    | _ -> (yy76 [@tailcall]) yyrecord

and yy82 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy88 [@tailcall]) yyrecord
    | _ -> (yy76 [@tailcall]) yyrecord

and yy83 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy84 (yyrecord : state) : bool =
  yyrecord.yycursor <- yyrecord.yymarker;
  if (yyrecord.yyaccept == 0) then (yy78 [@tailcall]) yyrecord
  else (yy76 [@tailcall]) yyrecord

and yy85 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy88 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy86 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy89 [@tailcall]) yyrecord
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy90 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy87 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy88 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy88 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy89 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8A'
    | '\xAF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy90 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x9F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy77 [@tailcall]) yyrecord
    | _ -> (yy84 [@tailcall]) yyrecord

and yy91 (yyrecord : state) : bool =
  true

and is_fully_whitespace (yyrecord : state) : bool =
  (yy74 [@tailcall]) yyrecord




let rec yy92 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '!'
    | '$'..'\''
    | '*'
    | ','
    | ':'
    | '<'
    | '>'..'Z'
    | '^'..'e'
    | 'g'..'h'
    | 'j'..'m'
    | 'o'..'s'
    | 'u'..'z'
    | '|'
    | '~' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | '+' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy98 [@tailcall]) yyrecord
    | '-' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy99 [@tailcall]) yyrecord
    | '.' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy100 [@tailcall]) yyrecord
    | 'f' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy101 [@tailcall]) yyrecord
    | 'i' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy102 [@tailcall]) yyrecord
    | 'n' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy103 [@tailcall]) yyrecord
    | 't' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy104 [@tailcall]) yyrecord
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy105 [@tailcall]) yyrecord
    | '\xC3'..'\xDF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy106 [@tailcall]) yyrecord
    | '\xE0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy107 [@tailcall]) yyrecord
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy108 [@tailcall]) yyrecord
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy109 [@tailcall]) yyrecord
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy110 [@tailcall]) yyrecord
    | '\xE4'..'\xEE' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy111 [@tailcall]) yyrecord
    | '\xEF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy112 [@tailcall]) yyrecord
    | '\xF0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy113 [@tailcall]) yyrecord
    | '\xF1'..'\xF3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy114 [@tailcall]) yyrecord
    | '\xF4' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy115 [@tailcall]) yyrecord
    | _ ->
      if (yyrecord.yylimit <= yyrecord.yycursor) then (
        (yy144 [@tailcall]) yyrecord
      ) else (
        yyrecord.yycursor <- yyrecord.yycursor + 1;
        (yy93 [@tailcall]) yyrecord
      )

and yy93 (yyrecord : state) : bool =
  (yy94 [@tailcall]) yyrecord

and yy94 (yyrecord : state) : bool =
  false

and yy95 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  (yy96 [@tailcall]) yyrecord yych

and yy96 (yyrecord : state) (yych : char) : bool =
  match yych with
    | '!'
    | '$'..'\''
    | '*'..'.'
    | '0'..':'
    | '<'
    | '>'..'Z'
    | '^'..'z'
    | '|'
    | '~' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | '\xC2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy116 [@tailcall]) yyrecord
    | '\xC3'..'\xDF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | '\xE0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy119 [@tailcall]) yyrecord
    | '\xE1' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy120 [@tailcall]) yyrecord
    | '\xE2' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy121 [@tailcall]) yyrecord
    | '\xE3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy122 [@tailcall]) yyrecord
    | '\xE4'..'\xEE' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | '\xEF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy124 [@tailcall]) yyrecord
    | '\xF0' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy125 [@tailcall]) yyrecord
    | '\xF1'..'\xF3' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy126 [@tailcall]) yyrecord
    | '\xF4' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy127 [@tailcall]) yyrecord
    | _ -> (yy97 [@tailcall]) yyrecord

and yy97 (yyrecord : state) : bool =
  
    yyrecord.yycursor >= yyrecord.yylimit


and yy98 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00'
    | '0'..'9' -> (yy97 [@tailcall]) yyrecord
    | '.' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy100 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy99 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00'
    | '0'..'9' -> (yy97 [@tailcall]) yyrecord
    | '.' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy100 [@tailcall]) yyrecord
    | 'i' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy102 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy100 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | '0'..'9' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy128 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy101 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'a' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy130 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy102 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'n' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy131 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy103 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'a' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy132 [@tailcall]) yyrecord
    | 'u' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy133 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy104 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'r' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy134 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy105 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x84'
    | '\x86'..'\x9F'
    | '\xA1'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy106 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy107 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy108 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x99'
    | '\x9B'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy135 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy109 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy136 [@tailcall]) yyrecord
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy137 [@tailcall]) yyrecord
    | '\x82'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy110 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy135 [@tailcall]) yyrecord
    | '\x81'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy111 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy112 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBA'
    | '\xBC'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | '\xBB' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy138 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy113 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x90'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy114 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy115 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 1;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | _ -> (yy94 [@tailcall]) yyrecord

and yy116 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x84'
    | '\x86'..'\x9F'
    | '\xA1'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy117 (yyrecord : state) : bool =
  yyrecord.yycursor <- yyrecord.yymarker;
  match yyrecord.yyaccept with
    | 0 -> (yy97 [@tailcall]) yyrecord
    | 1 -> (yy94 [@tailcall]) yyrecord
    | 2 -> (yy129 [@tailcall]) yyrecord
    | _ -> (yy141 [@tailcall]) yyrecord

and yy118 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy119 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy120 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x99'
    | '\x9B'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | '\x9A' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy135 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy121 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy136 [@tailcall]) yyrecord
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy137 [@tailcall]) yyrecord
    | '\x82'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy122 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy135 [@tailcall]) yyrecord
    | '\x81'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy123 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy124 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBA'
    | '\xBC'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy118 [@tailcall]) yyrecord
    | '\xBB' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy138 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy125 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x90'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy126 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy127 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy123 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy128 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 2;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '!'
    | '$'..'\''
    | '*'..'.'
    | '0'..':'
    | '<'
    | '>'..'Z'
    | '^'..'z'
    | '|'
    | '~'
    | '\xC2'..'\xF4' -> (yy96 [@tailcall]) yyrecord yych
    | _ -> (yy129 [@tailcall]) yyrecord

and yy129 (yyrecord : state) : bool =
  false

and yy130 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'l' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy139 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy131 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'f' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy140 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy132 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'n' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy140 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy133 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'l' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy142 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy134 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'u' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy143 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy135 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x81'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy136 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x8B'..'\x8D'
    | '\x90'..'\xA7'
    | '\xB0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy137 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x9E'
    | '\xA0'..'\xA5'
    | '\xAA'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy138 (yyrecord : state) : bool =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBE' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy95 [@tailcall]) yyrecord
    | _ -> (yy117 [@tailcall]) yyrecord

and yy139 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 's' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy143 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy140 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 3;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '!'
    | '$'..'\''
    | '*'..'.'
    | '0'..':'
    | '<'
    | '>'..'Z'
    | '^'..'z'
    | '|'
    | '~'
    | '\xC2'..'\xF4' -> (yy96 [@tailcall]) yyrecord yych
    | _ -> (yy141 [@tailcall]) yyrecord

and yy141 (yyrecord : state) : bool =
  
    not (yyrecord.yycursor >= yyrecord.yylimit)


and yy142 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'l' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy140 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy143 (yyrecord : state) : bool =
  yyrecord.yyaccept <- 0;
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00' -> (yy97 [@tailcall]) yyrecord
    | 'e' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy140 [@tailcall]) yyrecord
    | _ -> (yy96 [@tailcall]) yyrecord yych

and yy144 (yyrecord : state) : bool =
  false

and is_valid_ident (yyrecord : state) : bool =
  (yy92 [@tailcall]) yyrecord




let rec yy145 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x00'
    | '\x01'..'\x07'
    | '\x0E'..'\x1F'
    | '\x7F' ->
      if (yyrecord.yylimit <= yyrecord.yycursor) then (
        (yy171 [@tailcall]) yyrecord strbuf
      ) else (
        yyrecord.yyt1 <- yyrecord.yycursor;
        yyrecord.yycursor <- yyrecord.yycursor + 1;
        (yy146 [@tailcall]) yyrecord strbuf
      )
    | '\b' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy147 [@tailcall]) yyrecord strbuf
    | '\t' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy148 [@tailcall]) yyrecord strbuf
    | '\n' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy149 [@tailcall]) yyrecord strbuf
    | '\x0B'
    | ' '..'!'
    | '#'..'['
    | ']'..'~' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy150 [@tailcall]) yyrecord strbuf
    | '\x0C' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy151 [@tailcall]) yyrecord strbuf
    | '\r' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy152 [@tailcall]) yyrecord strbuf
    | '"' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy153 [@tailcall]) yyrecord strbuf
    | '\\' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy154 [@tailcall]) yyrecord strbuf
    | '\xC2'..'\xDF' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy157 [@tailcall]) yyrecord strbuf
    | '\xE0' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy158 [@tailcall]) yyrecord strbuf
    | '\xE1'
    | '\xE3'..'\xEE' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy159 [@tailcall]) yyrecord strbuf
    | '\xE2' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy160 [@tailcall]) yyrecord strbuf
    | '\xEF' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy161 [@tailcall]) yyrecord strbuf
    | '\xF0' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy162 [@tailcall]) yyrecord strbuf
    | '\xF1'..'\xF3' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy163 [@tailcall]) yyrecord strbuf
    | '\xF4' ->
      yyrecord.yyt1 <- yyrecord.yycursor;
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy164 [@tailcall]) yyrecord strbuf
    | _ ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy155 [@tailcall]) yyrecord strbuf

and yy146 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yytl0 <- yyrecord.yyt1;
  yyrecord.yytr0 <- yyrecord.yycursor;
  
    let udecode = String.get_utf_8_uchar yyrecord.yyinput yyrecord.yytl0 in
    if not (Uchar.utf_decode_is_valid udecode) then
      failwith "Malformed UTF-8";
    let code = Uchar.to_int (Uchar.utf_decode_uchar udecode) in
    Buffer.add_string strbuf (Printf.sprintf "\\u{%X}" code);
    escape_string yyrecord strbuf


and yy147 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\b"; escape_string yyrecord strbuf

and yy148 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\t"; escape_string yyrecord strbuf

and yy149 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\n"; escape_string yyrecord strbuf

and yy150 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yytl0 <- yyrecord.yyt1;
  yyrecord.yytr0 <- yyrecord.yycursor;
  
    let len = yyrecord.yytr0 - yyrecord.yytl0 in
    Buffer.add_substring strbuf yyrecord.yyinput yyrecord.yytl0 len;
    escape_string yyrecord strbuf


and yy151 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\f"; escape_string yyrecord strbuf

and yy152 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\r"; escape_string yyrecord strbuf

and yy153 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\\""; escape_string yyrecord strbuf

and yy154 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.add_string strbuf "\\\\"; escape_string yyrecord strbuf

and yy155 (yyrecord : state) (strbuf : Buffer.t) : string =
  (yy156 [@tailcall]) yyrecord strbuf

and yy156 (yyrecord : state) (strbuf : Buffer.t) : string =
  assert false

and yy157 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy150 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy158 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\xA0'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy165 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy159 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy165 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy160 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy167 [@tailcall]) yyrecord strbuf
    | '\x81' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy168 [@tailcall]) yyrecord strbuf
    | '\x82'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy165 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy161 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBA'
    | '\xBC'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy165 [@tailcall]) yyrecord strbuf
    | '\xBB' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy169 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy162 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x90'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy170 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy163 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy170 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy164 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yymarker <- yyrecord.yycursor;
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8F' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy170 [@tailcall]) yyrecord strbuf
    | _ -> (yy156 [@tailcall]) yyrecord strbuf

and yy165 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy150 [@tailcall]) yyrecord strbuf
    | _ -> (yy166 [@tailcall]) yyrecord strbuf

and yy166 (yyrecord : state) (strbuf : Buffer.t) : string =
  yyrecord.yycursor <- yyrecord.yymarker;
  (yy156 [@tailcall]) yyrecord strbuf

and yy167 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\x8D'
    | '\x90'..'\xA9'
    | '\xAF'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy150 [@tailcall]) yyrecord strbuf
    | '\x8E'..'\x8F'
    | '\xAA'..'\xAE' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy146 [@tailcall]) yyrecord strbuf
    | _ -> (yy166 [@tailcall]) yyrecord strbuf

and yy168 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xA5'
    | '\xAA'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy150 [@tailcall]) yyrecord strbuf
    | '\xA6'..'\xA9' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy146 [@tailcall]) yyrecord strbuf
    | _ -> (yy166 [@tailcall]) yyrecord strbuf

and yy169 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBE' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy150 [@tailcall]) yyrecord strbuf
    | '\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy146 [@tailcall]) yyrecord strbuf
    | _ -> (yy166 [@tailcall]) yyrecord strbuf

and yy170 (yyrecord : state) (strbuf : Buffer.t) : string =
  let yych = get yyrecord.yyinput yyrecord.yycursor in
  match yych with
    | '\x80'..'\xBF' ->
      yyrecord.yycursor <- yyrecord.yycursor + 1;
      (yy165 [@tailcall]) yyrecord strbuf
    | _ -> (yy166 [@tailcall]) yyrecord strbuf

and yy171 (yyrecord : state) (strbuf : Buffer.t) : string =
  Buffer.contents strbuf

and escape_string (yyrecord : state) (strbuf : Buffer.t) : string =
  (yy145 [@tailcall]) yyrecord strbuf



let resolve_escapes str = resolve_escapes (make_state str) (Buffer.create 32)

let skip_whitespace_line ?(offset = 0) str =
  skip_whitespace_line (make_state ~offset str)

let is_fully_whitespace = function
  | "" -> true
  | str -> is_fully_whitespace (make_state str)

let is_valid_ident str = is_valid_ident (make_state str)
[@@inline]

let escape_string = function
  | "" as empty -> empty
  | str -> escape_string (make_state str) (Buffer.create 32)
